/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MainFrames;

import com.google.gson.Gson;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mehul
 */
public class EmpPnl extends javax.swing.JFrame {

    private static int bno;
    private boolean autoref = true;
    private DefaultTableModel tblmdl, tblmdl2;
    private boolean chksel;
    private tmptable t;
    static Connection con;
    private java.sql.PreparedStatement ps;
    private java.sql.ResultSet rs;
    private int iqty;
    private double tot = 0;
    RowPopup pop;
    SimpleDateFormat sdft = new SimpleDateFormat("HH:mm:ss z");

    Thread tt = new Thread(new Runnable() {
        @Override
        public void run() {
            while (true) {
                ttime.setText(sdft.format(new Date()));
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    });

    Thread ub = new Thread(new Runnable() {
        @Override
        public void run() {
            tblmdl2 = (DefaultTableModel) BHTable1.getModel();
            while (autoref) {
                tblmdl2.setRowCount(0);
                try {
                    ps = con.prepareStatement("select * from bills where hby=?");
                    ps.setString(1, EmpLogin.empid);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        String[] tmp = {rs.getString(1), rs.getString(2), Double.toString(rs.getDouble(6))};
                        tblmdl2.addRow(tmp);
                    }
                    Thread.sleep(2000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    });

     Thread upbno = new Thread(new Runnable() {
        @Override
        public void run() {
            while (true) {
                try {
            ps = con.prepareStatement("select count(*) from bills");
            rs = ps.executeQuery();
            rs.next();
            bno = rs.getInt(1) + 1;
            BPtbno.setText(Integer.toString(bno));
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    });
    
    /**
     * Creates new form NewJFrame
     */
    public EmpPnl() {
        //            con = (Connection) java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/ABSOLUTE09", "root", "");
        con = MainPage.con;

        initComponents();
         pop = new RowPopup(BPTable);
        
        t = new tmptable();
        this.BPtbno.setText(Integer.toString(bno));

        tt.start();
        upbno.start();
        ub.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EmpPanel = new javax.swing.JTabbedPane();
        generatebill = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        BPPayOption = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        BPticode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ttime = new javax.swing.JTextField();
        BPbinquiry = new javax.swing.JButton();
        BPbgenerate = new javax.swing.JButton();
        BPbadd = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        BPtcname = new javax.swing.JTextField();
        BPtbno = new javax.swing.JTextField();
        BPtiname = new javax.swing.JTextField();
        BPtiprice = new javax.swing.JTextField();
        BPCatagory = new javax.swing.JComboBox<>();
        BPbreset = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        BPqty = new javax.swing.JSpinner();
        tdate = new javax.swing.JTextField();
        BPauto = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        BPTable = new javax.swing.JTable();
        BPtotal = new javax.swing.JLabel();
        manageitem = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lcmpny = new javax.swing.JLabel();
        lqty = new javax.swing.JLabel();
        IMcmpny = new javax.swing.JTextField();
        IMremove = new javax.swing.JButton();
        licode = new javax.swing.JLabel();
        IMmodify = new javax.swing.JButton();
        lname = new javax.swing.JLabel();
        IMadd = new javax.swing.JButton();
        IMIcode = new javax.swing.JTextField();
        IMshow = new javax.swing.JButton();
        liprice = new javax.swing.JLabel();
        IMjCheckBox1 = new javax.swing.JCheckBox();
        IMIprice = new javax.swing.JTextField();
        IMQuntity = new javax.swing.JSpinner();
        IMIname = new javax.swing.JTextField();
        IMCatagory = new javax.swing.JComboBox<>();
        lctgry = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        IMTable = new javax.swing.JTable();
        IMreset = new javax.swing.JButton();
        billhistory = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BHTable1 = new javax.swing.JTable();
        BHaref = new javax.swing.JButton();
        BHview = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        BHdata = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EMPLOYEE PANEL");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(102, 102, 102));

        generatebill.setBackground(new java.awt.Color(102, 102, 102));

        jLabel7.setText("Payment Option :");

        BPPayOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CASH", "UPI", "CREDIT/DEBIT CARD" }));

        jLabel8.setText("Item Code :");

        jLabel9.setText("DATE :");

        jLabel10.setText("TIME :");

        ttime.setText(null);
        ttime.setEditable(false);

        BPbinquiry.setText("INQUIRY");
        BPbinquiry.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BPbinquiryMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BPbinquiryMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BPbinquiryMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BPbinquiryMouseReleased(evt);
            }
        });
        BPbinquiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPbinquiryActionPerformed(evt);
            }
        });

        BPbgenerate.setText("GENERATE");
        BPbgenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPbgenerateActionPerformed(evt);
            }
        });

        BPbadd.setText("ADD");
        BPbadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPbaddActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("                                                                               BILL - PAGE");

        jLabel4.setText("Bill ID :");

        jLabel5.setText("Customer Name :");

        jLabel6.setText("Catagory :");

        jLabel11.setText("Item Price :");

        jLabel12.setText("Item Name :");

        BPtbno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPtbnoActionPerformed(evt);
            }
        });

        BPCatagory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electronics", "Electical", "Grocery", "Dairy Item", "Fashion", "Jewellery", "Cosmetics", "Other" }));
        BPCatagory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPCatagoryActionPerformed(evt);
            }
        });

        BPbreset.setText("RESET");
        BPbreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPbresetActionPerformed(evt);
            }
        });

        jLabel13.setText("Quantity :");

        BPqty.setModel(new javax.swing.SpinnerNumberModel());

        SimpleDateFormat sdf = new SimpleDateFormat("dd MMMM yyyy");
        tdate.setText(sdf.format(new Date()));
        tdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tdateActionPerformed(evt);
            }
        });

        BPauto.setText("AUTO-FILL");
        BPauto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPautoActionPerformed(evt);
            }
        });

        BPTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Icode", "Name", "Catagory", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BPTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BPTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                BPTableMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(BPTable);
        if (BPTable.getColumnModel().getColumnCount() > 0) {
            BPTable.getColumnModel().getColumn(0).setPreferredWidth(15);
        }

        BPtotal.setText("TOTAL  : 0.0");

        javax.swing.GroupLayout generatebillLayout = new javax.swing.GroupLayout(generatebill);
        generatebill.setLayout(generatebillLayout);
        generatebillLayout.setHorizontalGroup(
            generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatebillLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(BPbgenerate)
                .addGap(200, 200, 200)
                .addComponent(BPbreset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BPtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generatebillLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, generatebillLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generatebillLayout.createSequentialGroup()
                                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(generatebillLayout.createSequentialGroup()
                                        .addComponent(BPtbno, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ttime, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(generatebillLayout.createSequentialGroup()
                                        .addComponent(BPtcname, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(289, 289, 289)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tdate))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generatebillLayout.createSequentialGroup()
                                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(generatebillLayout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BPtiname, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BPtiprice, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(generatebillLayout.createSequentialGroup()
                                                .addGap(83, 83, 83)
                                                .addComponent(BPqty))
                                            .addGroup(generatebillLayout.createSequentialGroup()
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(106, 106, 106)))
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(generatebillLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(BPticode, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BPauto, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(BPbinquiry)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(BPPayOption, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(25, 25, 25)))
                                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BPbadd, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BPCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(76, 76, 76)))))
                .addContainerGap())
        );
        generatebillLayout.setVerticalGroup(
            generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatebillLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPtcname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BPtbno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPtiname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPtiprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(BPticode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPauto)
                    .addComponent(BPbadd)
                    .addComponent(jLabel7)
                    .addComponent(BPPayOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BPbinquiry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generatebillLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BPbreset)
                    .addComponent(BPbgenerate)
                    .addComponent(BPtotal))
                .addContainerGap())
        );

        //this.tbno.setText(bn);
        BPtiprice.setToolTipText("enter only FLOAT value");

        EmpPanel.addTab("Genarate Bill", generatebill);

        manageitem.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("                                                                            ITEM - MANAGE");

        lcmpny.setText("Compony Name :");

        lqty.setText("QTY :");

        IMcmpny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMcmpnyActionPerformed(evt);
            }
        });

        IMremove.setText("REMOVE");
        IMremove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMremoveActionPerformed(evt);
            }
        });

        licode.setText("Item Code :");

        IMmodify.setText("MODIFY");
        IMmodify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                IMmodifyMousePressed(evt);
            }
        });
        IMmodify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMmodifyActionPerformed(evt);
            }
        });

        lname.setText("Item Name :");

        IMadd.setText("ADD");
        IMadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMaddActionPerformed(evt);
            }
        });

        IMshow.setText("SHOW ");
        IMshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMshowActionPerformed(evt);
            }
        });

        liprice.setText("Item Price :");

        IMjCheckBox1.setText("SHOW ALL RECORD...");
        IMjCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMjCheckBox1ActionPerformed(evt);
            }
        });

        IMIprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMIpriceActionPerformed(evt);
            }
        });

        IMIname.setNextFocusableComponent(IMIcode);

        IMCatagory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Electonics", "Electical", "Grocery", "Dairy Item", "Fashion", "Jewellery", "Cosmetics", "Other" }));
        IMCatagory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMCatagoryActionPerformed(evt);
            }
        });

        lctgry.setText("Catagory :");

        IMTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204)));
        IMTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Compony", "Item Code", "Item Price", "Item Name", "Quntity", "Catagory"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(IMTable);

        IMreset.setText("RESET");
        IMreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IMresetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageitemLayout = new javax.swing.GroupLayout(manageitem);
        manageitem.setLayout(manageitemLayout);
        manageitemLayout.setHorizontalGroup(
            manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageitemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageitemLayout.createSequentialGroup()
                        .addComponent(lname)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IMIname, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(licode, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMIcode, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(liprice, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMIprice, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lcmpny, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMcmpny, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lqty, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(IMQuntity, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(77, Short.MAX_VALUE))
                    .addGroup(manageitemLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(IMjCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185)
                        .addComponent(lctgry, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, manageitemLayout.createSequentialGroup()
                        .addGroup(manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, manageitemLayout.createSequentialGroup()
                                .addComponent(IMadd, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(IMremove)
                                .addGap(32, 32, 32)
                                .addComponent(IMmodify, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(IMshow)
                                .addGap(36, 36, 36)
                                .addComponent(IMreset)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        manageitemLayout.setVerticalGroup(
            manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageitemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lcmpny, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMcmpny, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(licode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMIcode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(liprice, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMIprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMIname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lqty, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMQuntity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IMjCheckBox1)
                    .addComponent(IMCatagory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lctgry, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(manageitemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IMadd)
                    .addComponent(IMremove, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMmodify)
                    .addComponent(IMshow)
                    .addComponent(IMreset))
                .addContainerGap())
        );

        IMIprice.setToolTipText("Enter Only Float/Integer Value");

        EmpPanel.addTab("Manage Item", manageitem);

        billhistory.setBackground(new java.awt.Color(102, 102, 102));

        BHTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 204)));
        BHTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill No", "Customer Name", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        BHTable1.setSelectionBackground(new java.awt.Color(0, 255, 0));
        jScrollPane2.setViewportView(BHTable1);

        BHaref.setText("AUTO REFRESH (ON)");
        BHaref.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BHarefActionPerformed(evt);
            }
        });

        BHview.setText(">>");
        BHview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BHviewActionPerformed(evt);
            }
        });

        BHdata.setEditable(false);
        BHdata.setBackground(new java.awt.Color(204, 204, 204));
        BHdata.setColumns(20);
        BHdata.setRows(5);
        jScrollPane3.setViewportView(BHdata);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("                                                                            BILL - HISTORY");

        javax.swing.GroupLayout billhistoryLayout = new javax.swing.GroupLayout(billhistory);
        billhistory.setLayout(billhistoryLayout);
        billhistoryLayout.setHorizontalGroup(
            billhistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(billhistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BHview, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billhistoryLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BHaref)
                .addGap(358, 358, 358))
        );
        billhistoryLayout.setVerticalGroup(
            billhistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, billhistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(billhistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(billhistoryLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(billhistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(billhistoryLayout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(BHview)))
                .addGap(18, 18, 18)
                .addComponent(BHaref)
                .addContainerGap())
        );

        EmpPanel.addTab("Bill History", billhistory);

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jButton1.setText("LOG-OUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EmpPanel)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EmpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            con.close();
            JOptionPane.showMessageDialog(this, "Have A Greate Day!");
            new MainPage().setVisible(true);
            this.setVisible(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Exception.." + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void IMcmpnyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMcmpnyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IMcmpnyActionPerformed

    private void IMremoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMremoveActionPerformed
        tblmdl = (DefaultTableModel) IMTable.getModel();
//        try {
        if (this.IMIcode.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter ICODE");
        } else {
            if (this.deleteItem(con, this.IMIcode.getText()) != -1) {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.INFO, "item removed");
            } else {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.INFO, "item not removed");
            }

//                this.refreshTable(IL);
            this.IMcmpny.setText(null);
            this.IMIcode.setText(null);
            this.IMIname.setText(null);
            this.IMIprice.setText(null);
            this.IMQuntity.setValue(new Integer(0));

        }

    }//GEN-LAST:event_IMremoveActionPerformed

    private void IMmodifyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IMmodifyMousePressed

    }//GEN-LAST:event_IMmodifyMousePressed

    private void IMmodifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMmodifyActionPerformed
        new Modifi().setVisible(true);
        //  this.refreshTable(IL);
    }//GEN-LAST:event_IMmodifyActionPerformed

    private void IMaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMaddActionPerformed

        tblmdl = (DefaultTableModel) IMTable.getModel();
//        try {
        if (!(this.IMcmpny.getText().isEmpty() || IMIcode.getText().isEmpty() || this.IMIprice.getText().isEmpty() || (Integer) this.IMQuntity.getValue() <= 0 || this.IMIname.getText().isEmpty())) {

            Item i = new Item(this.IMIcode.getText(), this.IMcmpny.getText(), this.IMIprice.getText(),
                    this.IMQuntity.getValue().toString(), this.IMIname.getText(), this.IMCatagory.getSelectedItem().toString(), EmpLogin.empid);
            String[] tmp = {i.getCmpny(), i.getIcode(), i.getIprice(), i.getIname(), i.getQty(), i.getCatagory()};

            if (this.addItem(con, i) != 0) {
                tblmdl.addRow(tmp);
                       Logger.getLogger(EmpPnl.class.getName()).log(Level.INFO, new Gson().toJson(i));
          
            } else {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.INFO, "problem after calling addItem method");
            }

        } else {
            JOptionPane.showMessageDialog(this, "Fill ALL DETAILS..");
        }

    }//GEN-LAST:event_IMaddActionPerformed


    private void IMshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMshowActionPerformed
        try {
            tblmdl = (DefaultTableModel) IMTable.getModel();
            //String[] tmp;
            if (this.chksel) {
                ps = con.prepareStatement("select * from items");
                rs = ps.executeQuery();
                while (rs.next()) {
                    String[] tmp = {rs.getString(2), rs.getString(1), Double.toString(rs.getDouble(3)), rs.getString(5),
                        Double.toString(rs.getDouble(4)),
                        rs.getString(6)};
                    tblmdl.addRow(tmp);
                }
            } else {
                if (!this.IMIcode.getText().isEmpty()) {
                    ps = con.prepareStatement("select * from items where icode=?");
                    ps.setString(1, this.IMIcode.getText().trim());
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        String[] tmp = {rs.getString(2), rs.getString(1), Double.toString(rs.getDouble(3)), rs.getString(5),
                            Double.toString(rs.getDouble(4)),
                            rs.getString(6)};
                        tblmdl.addRow(tmp);
                    } else {
                        JOptionPane.showMessageDialog(this, "Item NOT FOUND");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Enter ITEM CODE");
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_IMshowActionPerformed

    private void IMjCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMjCheckBox1ActionPerformed
        if (this.IMjCheckBox1.isSelected())
            this.chksel = true;
        else
            this.chksel = false;
    }//GEN-LAST:event_IMjCheckBox1ActionPerformed

    private void IMCatagoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMCatagoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IMCatagoryActionPerformed

    private void BHarefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BHarefActionPerformed
        if (autoref) {
            ub.suspend();
            //ub.interrupt();
            autoref = false;
            BHaref.setText("AUTO REFRESH (OFF)");

        } else {
            //ub.interrupt();
            ub.resume();
            autoref = true;
            BHaref.setText("AUTO REFRESH (ON)");
        }
        Logger.getLogger(EmpPnl.class.getName()).log(Level.INFO, "" + autoref + " " + ub.getState().name() + " " + Thread.activeCount());
    }//GEN-LAST:event_BHarefActionPerformed

    private void BHviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BHviewActionPerformed
        this.BHdata.setText(null);
        tblmdl = (DefaultTableModel) BHTable1.getModel();
        int indx = BHTable1.getSelectedRow();

        try {
             ps = con.prepareStatement("select * from bills where bill_id=?");
             ps.setString(1, (String) BHTable1.getValueAt(indx, 0));
             rs = ps.executeQuery();
             rs.next();
             Gson gs = new Gson();
             Bill b = gs.fromJson(rs.getString("data"), Bill.class);
             
             String tmp="";
             tmp+="\nCustomer Name : "+b.getCname();
             tmp+="\nBill No : "+b.getBillid();
             tmp+="\n\nItem Name    Catagory    Price    Quantity";
             
             String data[][]=b.getData();
             for(int i=0;i<data.length;i++){
                             tmp+="\n"+data[i][0]+"  :  "+data[i][1]+"  :  "+data[i][2]+"  :  "+data[i][3];
             }
             tmp+="\n\nTotal : "+b.getTotal();
             tmp+="\nPayment Mehtod : "+b.getPmethod();
             tmp+="\nempid : "+b.getHby();
             this.BHdata.setText(tmp);

        } catch (Exception ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BHviewActionPerformed

    private void BPbinquiryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BPbinquiryMouseClicked
        // TODO add your handling code here:
        //  JOptionPane.showMessageDialog(this,"realesd");
    }//GEN-LAST:event_BPbinquiryMouseClicked

    private void BPbinquiryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BPbinquiryMouseEntered
        // TODO add your handling code here:'
        //  JOptionPane.showMessageDialog(this,"realesd");
    }//GEN-LAST:event_BPbinquiryMouseEntered

    private void BPbinquiryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BPbinquiryMousePressed
        // JOptionPane.showMessageDialog(this,":seeeg");
        //t.setVisible(true);
    }//GEN-LAST:event_BPbinquiryMousePressed

    private void BPbinquiryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BPbinquiryMouseReleased
        // JOptionPane.showMessageDialog(this,"realesd");
        //t.setVisible(false);
    }//GEN-LAST:event_BPbinquiryMouseReleased

    private void BPbinquiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPbinquiryActionPerformed
        t = new tmptable();
        t.setVisible(true);
    }//GEN-LAST:event_BPbinquiryActionPerformed

    private void BPbgenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPbgenerateActionPerformed
        tblmdl = (DefaultTableModel) BPTable.getModel();
        if (this.BPtcname.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter CUSTOMER NAME..");
        } else {
            String data[][];
            try {

                if (this.BPtcname.getText().isEmpty() || this.BPtbno.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Fill Customer Name & Bill NO.");
                } else {

                    int rows = tblmdl.getRowCount();
                    data = new String[rows][4];
                    for (int i = 0; i < rows; i++) {
                        for (int j = 0; j < 4; j++) {
                            data[i][j] = (String) tblmdl.getValueAt(i, j);
                        }
                    }
                    double total = this.calculate(data, rows);
                    ps = con.prepareStatement("INSERT INTO `bills`(`bill_id`, `cname`, `hby`, `pmethod`,`total`,`data`) VALUES (?,?,?,?,?,?)");
                    ps.setString(1, Integer.toString(bno));
                    ps.setString(2, this.BPtcname.getText());
                    ps.setString(3, EmpLogin.empid);
                    ps.setString(4, this.BPPayOption.getSelectedItem().toString());
                    ps.setDouble(5, total);

                    Bill obj = new Bill();
                    obj.setBillid(Integer.toString(bno));
                    obj.setCname(BPtcname.getText());
                    obj.setData(data);
                    obj.setHby(EmpLogin.empid);
                    obj.setPmethod(this.BPPayOption.getSelectedItem().toString());
                    obj.setTotal(total);

                    Gson gs = new Gson();
                    String json = gs.toJson(obj);
                    ps.setString(6, json);
                    ps.executeUpdate();

                    Logger.getLogger(EmpPnl.class.getName()).log(Level.INFO, json);

                    File f = new File("Bills//Bill_" + bno + "_" + this.BPtcname.getText() + ".pdf");

                    this.generatefile(f, data, rows);
                    JOptionPane.showMessageDialog(this, "Generated TO :" + f.getAbsolutePath());

                   // bno++;
                   
                }
            } catch (HeadlessException ex) {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
            }
//            new Invoice.setVisible(true);
//            this.setVisible(false);

//            new Invoice.setVisible(true);
//            this.setVisible(false);
        }
    }//GEN-LAST:event_BPbgenerateActionPerformed

    private void BPbaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPbaddActionPerformed
        try {

            tblmdl = (DefaultTableModel) this.BPTable.getModel();
            if (((this.BPqty.getValue().toString().equals("0.0"))
                    || this.BPtiprice.getText().isEmpty())
                    || this.BPtiname.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter ALL/CORRECT DETAILS");
            } else {

                String data[] = {(this.BPticode.getText().isEmpty())?"null":this.BPticode.getText(),this.BPtiname.getText(), this.BPCatagory.getSelectedItem().toString(), this.BPtiprice.getText(), this.BPqty.getValue().toString()};

                if (this.BPticode.getText().isEmpty()) {
                    tot += (Double.parseDouble(this.BPtiprice.getText()) * Double.parseDouble(this.BPqty.getValue().toString()));
                    this.BPtotal.setText("TOTAL  : " + tot);
                    tblmdl.addRow(data);
                    
                } else {

                    ps = con.prepareStatement("select * from items where icode=?");//,java.sql.ResultSet.TYPE_SCROLL_SENSITIVE,java.sql.ResultSet.CONCUR_UPDATABLE);
                    ps.setString(1, this.BPticode.getText());
                    rs = ps.executeQuery();
                    if (rs.next()) {

                        iqty = rs.getInt(4);
                        Double sell = Double.valueOf(this.BPqty.getValue().toString());
                        if (iqty >= sell) {
                            iqty -= sell;
                            this.updateItemQty(con, iqty, this.BPticode.getText());
//                            rs.absolute(1);
//                            rs.updateInt(4, iqty);
//                            rs.updateRow();
                            tot += (Double.parseDouble(this.BPtiprice.getText()) * Double.parseDouble(this.BPqty.getValue().toString()));
                            this.BPtotal.setText("TOTAL  : " + tot);
                            tblmdl.addRow(data);
                        } else {
                            JOptionPane.showMessageDialog(this, "Available ITEM QUANTITY  : " + iqty);
                        }
                    }
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_BPbaddActionPerformed

    private void BPtbnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPtbnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BPtbnoActionPerformed

    private void BPCatagoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPCatagoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BPCatagoryActionPerformed

    private void BPbresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPbresetActionPerformed
        //    tblmdl = (DefaultTableModel) Table.getModel();
        tblmdl.setRowCount(0);
        //        int indx = Table.getSelectedRow();
        //        tblmdl.removeRow(indx);
        //        this.tiname.setText(null);
        //        this.ticode.setText(null);
        //        this.tiprice.setText(null);//this.qty.setValue(null);
        //        //this.tbno.setText(null);this.tcname.setText(null);
        this.tot = 0;
        this.BPtotal.setText("TOTAL  : 0.0");
        this.BPticode.setText(null);
        this.BPtiname.setText(null);
        this.BPtiprice.setText(null);
        this.BPqty.setValue(new Integer(0));
    }//GEN-LAST:event_BPbresetActionPerformed

    private void BPautoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPautoActionPerformed
        try {
            if (!this.BPticode.getText().isEmpty()) {
                try {
                    java.sql.ResultSet rs;
                    if ((rs = Modifi.autoFill(this.BPticode.getText().trim())) != null) {
                        this.BPticode.setText(rs.getString(1));
                        this.BPtcname.setText(rs.getString(2));
                        this.BPtiname.setText(rs.getString(5));
                        this.BPqty.setValue(rs.getDouble(4));
                        this.BPtiprice.setText(Double.toString(rs.getDouble(3)));
                        this.BPCatagory.setSelectedItem(rs.getString(6));
                    } else {
                        JOptionPane.showMessageDialog(this, "Item - NOT FOUND.");
                        this.BPticode.setText(null);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Item - NOT FOUND.");
                    Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter - ICODE");
            }
        } catch (Exception ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BPautoActionPerformed

    private void IMIpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMIpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IMIpriceActionPerformed

    private void IMresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IMresetActionPerformed
        tblmdl = (DefaultTableModel) IMTable.getModel();
        tblmdl.setRowCount(0);
        this.IMIcode.setText(null);
        this.IMIname.setText(null);
        this.IMIprice.setText(null);
        this.IMQuntity.setValue(0);
        this.IMcmpny.setText(null);
    }//GEN-LAST:event_IMresetActionPerformed

    private void tdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tdateActionPerformed

    private void BPTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BPTableMouseReleased
//     JOptionPane.showMessageDialog(this, "mouse exited");
    }//GEN-LAST:event_BPTableMouseReleased

    private void BPTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BPTableMouseClicked
            if(SwingUtilities.isRightMouseButton(evt)){
                    pop.show(evt.getComponent(), evt.getX(), evt.getY());
            }
    }//GEN-LAST:event_BPTableMouseClicked

    private double calculate(String ip[][], int rows) {
        double sum = 0, price, qnty;
        double tmp;
        for (int i = 0; i < rows; i++) {
            price = Double.parseDouble(ip[i][2]);
            qnty = Double.parseDouble(ip[i][3]);
            sum += price * qnty;
        }
        tmp = sum;
        return tmp;
    }

    private int addItem(java.sql.Connection con, Item i) {
        int tmp = 0;
        try {
            ps = con.prepareStatement("select * from items where icode = ?");
            ps.setString(1, i.getIcode());
            rs = ps.executeQuery();

            if (rs.next()) {
                JOptionPane.showMessageDialog(this, "Item Exist : " + i.toString());
            } else {
                ps = con.prepareStatement("INSERT INTO items VALUES (?,?,?,?,?,?,?,?)");
                ps.setString(1, i.getIcode());
                ps.setString(2, i.getcmpny());
                ps.setDouble(3, Double.parseDouble(i.getIprice()));
                ps.setDouble(4, Double.parseDouble(i.getQty()));
                ps.setString(5, i.getIname());
                ps.setString(6, i.getCatagory());
                ps.setString(7, EmpLogin.empid); //last added by
                ps.setObject(8, new Gson().toJson(i)); //jsonobj

                if ((tmp = ps.executeUpdate()) != 0) {
                    JOptionPane.showMessageDialog(this, "Item Inserted");
                } else {
                    JOptionPane.showMessageDialog(this, "Item Not Inserted");
                }

            }

        } catch (SQLException ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tmp;  //will retun the affected record in database  
    }

    private int deleteItem(Connection con, String icode) {
        int tmp = -1;
        try {
            ps = con.prepareCall("delete from items where icode = ?");
            ps.setString(1, icode);
            if ((tmp = ps.executeUpdate()) != 0) {
                JOptionPane.showMessageDialog(this, "Successfully DELETED..");
            } else {
                JOptionPane.showMessageDialog(this, "Item Does NOT EXIST");
            }
        } catch (SQLException ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tmp;  //will retun the affected record in database  
    }

    private int updateItemQty(java.sql.Connection con, int qty, String icode) {
        int res = 0;
        try {
            ps = con.prepareStatement("update items set qty=? where icode=?");
            ps.setInt(1, qty);
            ps.setString(2, icode);
            if ((res = ps.executeUpdate()) != 0) {
            }
        } catch (SQLException ex) {
            Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return res;
    }

    private void generatefile(File fname, String data[][], int rows) throws IOException, DocumentException {

        Document doc = new Document();
        PdfWriter pw = PdfWriter.getInstance(doc, new FileOutputStream(fname));
        doc.open();
        doc.setPageSize(PageSize.A6);
        String tmp;
        tmp = "CUSTOMER NAME  :  " + this.BPtcname.getText() + "\n";

        tmp += "BILL NO :  " + this.BPtbno.getText() + "\n";

        tmp += "DATE :   " + this.tdate.getText() + "\n";

        tmp += "TIME :   " + this.ttime.getText() + "\n\n";

        doc.add(new Paragraph(tmp));

        float[] wdth = {150f, 150f, 150f, 150f};
        PdfPTable pt = new PdfPTable(4);
        pt.addCell("ITEM NAME");
        pt.addCell("CATAGORY");
        pt.addCell("PRICE");
        pt.addCell("QUANTITY");

        for (int i = 0; i < rows; i++) {
            pt.addCell(data[i][0]);
            pt.addCell(data[i][1]);
            pt.addCell(data[i][2]);
            pt.addCell(data[i][3]);
        }
        doc.add(pt);
        tmp = "\n\n" + this.BPtotal.getText() + "\n";

        tmp += "\nPAYMENT METHOD :    " + this.BPPayOption.getSelectedItem().toString() + "\n";
        tmp += "\n     😀THANK YOU VISIT AGAIN😄\n"
                + "        HAVE A GREAT DAY";

        tmp += "\nemp/empid : " + EmpLogin.empname + "/" + EmpLogin.empid;
        doc.add(new Paragraph(tmp));
        doc.close();
        pw.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmpPnl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmpPnl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmpPnl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpPnl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmpPnl().setVisible(true);
            }
        });
    }
    
    
class RowPopup extends JPopupMenu{
 public  RowPopup(javax.swing.JTable ms){
     JMenuItem delete = new JMenuItem("delete");
     delete.addActionListener(new java.awt.event.ActionListener(){
         @Override
         public void actionPerformed(ActionEvent e) {
             tblmdl = (DefaultTableModel) BPTable.getModel();
             String icode;
             if(!(icode=tblmdl.getValueAt(BPTable.getSelectedRow(), 0).toString()).isEmpty()){
                 try {
                     ps = con.prepareStatement("update items set qty=(?+(select qty from items where icode = ?)) where icode=?");
                     ps.setInt(1, Integer.parseInt((String) (tblmdl.getValueAt(BPTable.getSelectedRow(),4))));
                     ps.setString(2, icode);
                     ps.setString(3, icode);
                     ps.executeUpdate();
                 } catch (SQLException ex) {
                     Logger.getLogger(EmpPnl.class.getName()).log(Level.SEVERE, null, ex);
                 }
             }
            tblmdl.removeRow(BPTable.getSelectedRow());
         }
     });
     add(delete);
 }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BHTable1;
    private javax.swing.JButton BHaref;
    private javax.swing.JTextArea BHdata;
    private javax.swing.JButton BHview;
    private javax.swing.JComboBox<String> BPCatagory;
    private javax.swing.JComboBox<String> BPPayOption;
    private javax.swing.JTable BPTable;
    private javax.swing.JButton BPauto;
    private javax.swing.JButton BPbadd;
    private javax.swing.JButton BPbgenerate;
    private javax.swing.JButton BPbinquiry;
    private javax.swing.JButton BPbreset;
    private javax.swing.JSpinner BPqty;
    private javax.swing.JTextField BPtbno;
    private javax.swing.JTextField BPtcname;
    private javax.swing.JTextField BPticode;
    private javax.swing.JTextField BPtiname;
    private javax.swing.JTextField BPtiprice;
    private javax.swing.JLabel BPtotal;
    private javax.swing.JTabbedPane EmpPanel;
    private javax.swing.JComboBox<String> IMCatagory;
    private javax.swing.JTextField IMIcode;
    private javax.swing.JTextField IMIname;
    private javax.swing.JTextField IMIprice;
    private javax.swing.JSpinner IMQuntity;
    private javax.swing.JTable IMTable;
    private javax.swing.JButton IMadd;
    private javax.swing.JTextField IMcmpny;
    private javax.swing.JCheckBox IMjCheckBox1;
    private javax.swing.JButton IMmodify;
    private javax.swing.JButton IMremove;
    private javax.swing.JButton IMreset;
    private javax.swing.JButton IMshow;
    private javax.swing.JPanel billhistory;
    private javax.swing.JPanel generatebill;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lcmpny;
    private javax.swing.JLabel lctgry;
    private javax.swing.JLabel licode;
    private javax.swing.JLabel liprice;
    private javax.swing.JLabel lname;
    private javax.swing.JLabel lqty;
    private javax.swing.JPanel manageitem;
    private javax.swing.JTextField tdate;
    private javax.swing.JTextField ttime;
    // End of variables declaration//GEN-END:variables
}
